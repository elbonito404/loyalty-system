import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config import BOT_TOKEN, ADMIN_ID

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
users_db = {}
promo_codes = {"WELCOME10": 10, "SUMMER20": 20}  # –ü—Ä–æ–º–æ–∫–æ–¥—ã: –∫–æ–¥ > –±–∞–ª–ª—ã

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    user_id = message.from_user.id
    if user_id not in users_db:
        users_db[user_id] = {"balance": 0, "history": []}
        await message.answer("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏!\n"
                           "üîπ /balance ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–ª—ã\n"
                           "üîπ /promo ‚Äî –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
                           "üîπ /gift ‚Äî –æ–±–º–µ–Ω—è—Ç—å –±–∞–ª–ª—ã –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏")
    else:
        await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
@dp.message_handler(commands=["balance"])
async def balance(message: types.Message):
    user_id = message.from_user.id
    balance = users_db.get(user_id, {}).get("balance", 0)
    await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –±–∞–ª–ª–æ–≤.")

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
@dp.message_handler(commands=["promo"])
async def promo(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, WELCOME10):")

@dp.message_handler(lambda msg: msg.text.upper() in promo_codes)
async def apply_promo(message: types.Message):
    user_id = message.from_user.id
    promo_code = message.text.upper()
    points = promo_codes[promo_code]
    
    if user_id not in users_db:
        users_db[user_id] = {"balance": 0, "history": []}
    
    users_db[user_id]["balance"] += points
    users_db[user_id]["history"].append(f"+{points} –∑–∞ –ø—Ä–æ–º–æ–∫–æ–¥ {promo_code}")
    
    await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! +{points} –±–∞–ª–ª–æ–≤.")

# –û–±–º–µ–Ω –±–∞–ª–ª–æ–≤ –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏ (–ø—Ä–∏–º–µ—Ä)
@dp.message_handler(commands=["gift"])
async def gift_menu(message: types.Message):
    gifts = {
        "1": {"name": "–°–∫–∏–¥–∫–∞ 10%", "cost": 50},
        "2": {"name": "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞", "cost": 30},
    }
    text = "üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫:\n" + "\n".join(
        f"{id}. {gift['name']} ‚Äî {gift['cost']} –±–∞–ª–ª–æ–≤" 
        for id, gift in gifts.items()
    )
    await message.answer(text)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)
